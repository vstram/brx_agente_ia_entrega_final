
import streamlit as st
import os
from src.agent import get_agent_executor, load_fiscal_notes_tool
import time

# --- 1. Configura√ß√£o da P√°gina e T√≠tulo ---
st.set_page_config(page_title="An√°lise Gerencial de Notas Fiscais", layout="wide")

st.title("ü§ñ Agente de An√°lise Gerencial de Notas Fiscais")
st.caption("Uma ferramenta de IA para extrair insights valiosos de seus dados fiscais.")

# --- 2. Barra Lateral para Configura√ß√£o ---
with st.sidebar:
    st.header("Configura√ß√µes")
    st.markdown("""
    Esta aplica√ß√£o utiliza a API do Google Gemini para a intelig√™ncia artificial e a API da Tavily para pesquisas na web. 
    Por favor, insira suas chaves de API abaixo.
    """)
    
    google_api_key = st.text_input("Chave da API do Google Gemini", type="password", key="google_api_key")
    tavily_api_key = st.text_input("Chave da API da Tavily", type="password", key="tavily_api_key")

    st.markdown("---")
    st.subheader("Sobre")
    st.markdown("""
    Este agente foi constru√≠do com **LangGraph** e **Streamlit** para fornecer uma interface de an√°lise de dados conversacional e poderosa.
    """)

# --- 3. L√≥gica Principal ---

# Verifica se as chaves de API foram inseridas
if google_api_key and tavily_api_key:
    os.environ["GOOGLE_API_KEY"] = google_api_key
    os.environ["TAVILY_API_KEY"] = tavily_api_key

    # Inicializa o agente (executor do grafo LangGraph)
    try:
        app = get_agent_executor()
        st.sidebar.success("Agente pronto para operar!")
    except Exception as e:
        st.sidebar.error(f"Erro ao inicializar o agente: {e}")
        st.stop()

    # Inicializa o estado da sess√£o para o hist√≥rico de chat
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Exibe o hist√≥rico de mensagens
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])
            if "image" in message:
                st.image(message["image"], caption="Gr√°fico Gerado pela An√°lise")

    # --- 4. Interface de Chat ---
    if prompt := st.chat_input("Qual an√°lise voc√™ gostaria de fazer?"):
        # Adiciona a mensagem do usu√°rio ao hist√≥rico
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        # Exibe a resposta do agente
        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            
            # Prepara a entrada para o agente
            inputs = {"messages": [("user", prompt)]}
            
            with st.spinner("Analisando..."):
                # Executa o agente em stream para uma experi√™ncia mais interativa
                for chunk in app.stream(inputs):
                    # O stream retorna um dicion√°rio com a chave do n√≥ que produziu a sa√≠da
                    if "agent" in chunk:
                        content = chunk["agent"].get("messages", [{}])[-1].content
                        if content:
                            full_response += content
                            message_placeholder.markdown(full_response + "‚ñå")
                
                message_placeholder.markdown(full_response)

            # Verifica se um gr√°fico foi gerado e o exibe
            if os.path.exists("plot.png"):
                st.image("plot.png", caption="Gr√°fico Gerado pela An√°lise")
                # Adiciona a imagem ao hist√≥rico para ser re-exibida
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": full_response,
                    "image": "plot.png"
                })
            else:
                 st.session_state.messages.append({"role": "assistant", "content": full_response})

else:
    st.warning("Por favor, insira suas chaves de API na barra lateral para come√ßar.")

